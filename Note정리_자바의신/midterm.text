1. 참조 자료형(Reference Type)과 기본 자료형(Primitive type)의 차이를 정리해 주세요.

-초기화 시의 차이점 
기본 자료형 -> 값을 바로 할당해 초기화
참조 자료형 -> new를 사용해 초기화 (String 예외)

-매개 변수로 전달할 때 차이점
기본 자료형 -> 무조건 "Pass by Value"로 데이터를 전달 => 호출된 메소드에서 값이 변경되더라도 원래의 값은 변경되지 않는다.
참조 자료형 -> "Pass by Reference"로 데이터를 전달 => 호출된 메소드에서 변경한 대로 데이터가 바뀐다.

2. 기본 자료형 8가지를 나열하고 각 타입의 특징을 정리해 주세요.

정수형: byte, short, int, long, char
실수형: double, float
기타: boolean

3. 형 변환이란 무엇이고 왜 해야하나요?

서로 다른 타입간의 연산을 수행해야 하는 경우처럼 타입을 같게 해줘야할 때가 있다.
이럴 때 자료형을 다른 타입으로 변환하는 작업이 형 변환이다. 형 변환을 하지 않았을 때 원하는 값이 나오지 않을 수 있다.

4. if문의 용도는 무엇이며, if-else와 if-else if는 어떤 점이 다른지 정리해 주세요.
if문은 특정 조건의 참, 거짓에 따라 수행되는 코드가 달라야할 때 조건문으로 사용한다.
if-else if는 조건이 여러개일 때 필터처럼 참, 거짓으로 수행할 코드를 거를 수 있다.

5. switch-case 문의 용도를 정리해주세요.
하나의 값이 여러 범위에 걸쳐서 비교되어야 할 때에는, 하나의 값으로 분기하여 비교하는 switch 구문을 사용하는 것이 좋다.

6. for, do-while, while을 어떻게 사용하는지 1부터 10까지 더하는 코드를 예로 들어 정리해 주세요.

for문
int sum = 0;
for(int i = 1; i++; i < 11){
	sum += i;
} 

do-while문

int sum = 0;
int i = 1;
do{
	sum += i;
	i++;
} while (i < 11);

while문

int sum = 0;
while(int i < 11){
	sum += i;
	i++;
}

7. 학생이라면 지금까지의 자신의 학점이나 등수를, 회사원이라면 지금까지의 고과를 String 배열에 넣고 출력하는 코드를 작성해주세요. 
String[] scoreArray = { "4.31", "4.5", "4.33", "4.25", "4.35"}
for(String score : scoreArray){
	System.out.println(score);
} 

8. 생성자는 무엇을 하는 데 사용하는 것이며, 별도로 만들지 않아도 자동으로 생성되는 생성자에 대해서 정리해주세요.

생성자는 클래스의 객체를 생성(초기화)하는데 사용된다.
클래스를 만들 때 매개변수가 필요가 없다면 별도로 만들지 않아도 자동으로 생성된다.

9. Overloading은 무엇인가요? public void setData(int a)라는 메소드를 원하시는대로 Overloading 해주세요.
Overloading은 같은 이름의 메소드를 매개 변수를 달리해 메소드를 확장하는 것이다.
public void setData(String a)
public void setData(boolean b, String a)

10. 패키지를 선언하는 위치와 이름을 지정할 때의 유의점을 정리해주세요.
패키지는 가장 위에 선언 해야 한다.
패키지 명에는 예약어를 사용하면 안된다.
패키지 명에는 소문자로 작성하는 것이 일반 적이다.
패키지는 package로 시작하고, 하위 패키지로 갈 때마다 .을 옆에 찍어준다.

11. 다른 패키지에 선언된 클래스를 사용하기 위한 import는 어디 위치에 선언해야하며, static import는 무엇인지 정리해주세요.
package 선언부와 class 선언부 사이에 선언해야 한다.
static import는 클래스에 선언되어 있는 static한 메소드나 변수를 import하기 위해 선언한다.


12. 클래스란 무엇인가요? 다음의 단어들이 포함되는 문장을 작성하고, 주어진 단어의 의미도 같이 정리해 주세요.(속성, 상태)
클래스는 상태와 행동(속성)을 가지는 자바의 가장 작은 단위이다. 
클래스 안에 변수를 선언하면 이를 상태라고 하고, 메소드를 선언하면 행동이라고 한다.

13. 인터페이스, abstract 클래스, Enum 클래스가 있는데 각각의 특징 및 다른 점을 정리해 주세요.

-----------------------------------------------------------------------------------------------
				|interface    |abstract class	|   class     |
-----------------------------------------------------------------------------------------------
선언 시 사용하는 예약어		|interface	|abstract class	|   class	|
				|		|			|		|
-----------------------------------------------------------------------------------------------
구현 안 된 메소드 포함 가능?	| 가능(필수)	|	가능		|	불가	|
-----------------------------------------------------------------------------------------------
구현된 메소드 포함 가능?		| 불가능		|	가능		|   가능(필수)	|
-----------------------------------------------------------------------------------------------
static 메소드 선언 가능 여부	| 불가능		|	가능		|	가능	|
-----------------------------------------------------------------------------------------------
final 메소드 선언 가능 여부	| 불가		|	가능		|	가능	|
-----------------------------------------------------------------------------------------------
상속(extends) 가능?		| 불가		|	가능		|	가능	|
-----------------------------------------------------------------------------------------------
구현(implements) 가능?		| 가능		|	불가		|	불가능	|
-----------------------------------------------------------------------------------------------

14. instances 라는 연산자의 용도를 정리해주세요.

형변환을 하기 전에 타입을 확인하기 위해 사용한다.


15. 어떤 클래스를 상속받아 확장을 하면, 부모 클래스의 어떤 것들을 사용할 수 있는지 정리해 주세요.

public, protected 범위 안의 변수와 메소드를 사용할 수 있다.

16. 변수를 final로 선언하는 것이 어떤 의미가 있는지 정리해 주세요.
변수를 생성할 때 할당된 값이 있고, 더이상 새로운 값을 할당할 수 없다.

17. 클래스를 final로 선언하는 것이 어떤 의미가 있는지 정리해 주세요.

더 이상 extend(확장)할 수 없다.

18. 변수를 static으로 선언하는 것이 어떤 의미가 있는지 정리해 주세요.
클래스 변수로 선언하는 것이다. 클래스 변수는 클래스가 처음 호출될 때 생명이 시작되고, 자바 프로그램이 끝날 때 소멸된다.

19. 메소드를 static으로 선언하는 것이 어떤 의미가 있는지 정리해 주세요.
객체를 따로 생성하지 않아도 호출이 가능하다.
클래스 변수만 사용할 수 있다.

20. try-catch-finally 블록은 왜 사용하고 각각의 블록이 어떤 용도로 사용되는지 정리해 주세요.

예외를 처리하기 위해 사용된다. (예외를 적절히 처리하지 않으면 에러가 발생할 수 있기 때문이다.)
try 부분에서는 예외가 발생할 가능성이 있는 내용이 담긴다.
catch 부분에서는 예외가 발생했을 때 예외에 따라 처리할 내용이 담긴다.
finally 부분에서는 예외 발생 유무에 상관없이 마지막으로 꼭 실행되는 내용이 담긴다.











