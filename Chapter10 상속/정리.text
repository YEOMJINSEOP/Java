* 상속

public class Child extends Parent

* super

자바의 예약어.
메소드처럼 super()로 사옹하면 부모 클래스의 생성자를 호출한다는 것을 의미한다. 
메소드처럼 사용하지 않고 super.printName()으로 사용하면 부모 클래스에 있는 printName()이라는 메소드를 호출한다는 의미다.

* 메소드 Overriding

부모 클래스에 선언되어 있는 메소드와 동일하게 선언되어 있는 메소드를 자식 클래스에 선언하면 자식 클래스의 메소드만 실행된다. 
생성자의 경우 자동으로 부모 클래스에 있는 생성자를 호출하는 super()가 추가되지만, 메소드는 그렇지 않다. 이게 바로 "메소드 Overriding이다."


참고로 "동일하게 선언되어 있다"는 말을 좀 유식하게 하면 "동일한 signature를 가진다"라고 표현한다. 여기서 signature는 메소드 이름과 매개 변수의 타입 및 개수를 의미한다.

<Overriding 정리>
메소드 Overriding은 부모 클래스의 메소드와 동일한 시그니처를 갖는 자식 클래스의 메소드가 존재할 때 성립된다.
Overriding된 메소드는 부모 클래스와 동일한 리턴 타입을 가져야만 한다.
Overriding된 메소드의 접근 제어자는 부모 클래스에 있는 메소드와 달라도 되지만, 접근 권한이 확장되는 경우에만 허용된다. 접근 권한이 축소될 경우에는 컴파일 에러가 발생한다.


[주의]
Overloading: 확장 (메소드의 매개 변수들을 확장하기 때문에. 확장)
Overriding: 덮어 씀 (부모 클래스의 메소드 시그니처를 복제해서 자식 클래스에서 새로운 것을 만들어 내어 부모 클래스의 기능은 무시하고, 자식 클래스에서 덮어 씀)


* 참조 자료형의 형 변환

자식 클래스에서는 부모 클래스에 있는 메소드와 변수들을 사용할 수 있다.
그런데, 거꾸로 부모 클래스에서는 자식 클래스에 있는 모든 메소드와 변수들을 사용할 수 없다.

- instance
: 명시적으로 형 변환을 하기 전에 타입을 확인할 때 쓰는 예약어


* Polymorphism(다형성)
하나의 객체가 여러가지 타입을 가질 수 있는 것을 의미한다.
다형성은 상속, 추상화와 더불어 객체지향 프로그래밍을 구성하는 중요한 특징 중 하나.
형 변환을 하더라도, 실제 호출되는 것은 원래 객체에 있는 메소드가 호출되는 것.
자바에서는 이런한 다형성을 부모 클래스 타입의 참조 변수로 자식 클래스 타입의 인스턴스를 참조할 수 있도록 하여 구현하고 있다.