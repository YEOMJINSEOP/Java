*클래스란?
Java의 가장 작은 단위. 상태와 행동을 갖고 있다.
클래스 안에 선언된 변수를 상태라고 하고, 선언된 메소드를 행동이라고 한다.

*메소드란?
메소드는 클래스 내에서 행동에 속하며, 특정한 작업을 수행하는 단위이다.

*클래스가 갖고 있어야 하는 두 가지는?
:상태(State)와 변수(Behavior)

---

*메소드를 선언할 때 반드시 꼭 있어야 하는 세 가지는 무엇인가요?
리턴타입, 메소드 이름, 메소드 내용

*컴파일이란?
내가 만든 프로그램 코드를 컴퓨터가 이해할 수 있또록 엮어 주는 작업

<자바 컴파일 및 실행 절차>

 소스           바이트 코드            바이트 코드            기계어
----> [컴파일러] --------> [디스크] ------------> [JVM] ----------> [운영체제]

---

*클래스와 객체의 차이점은?
클래스 -> 붕어빵 틀 : 구조나 기능을 명세하는 것
객체 -> 붕어빵 : 클래스라는 설계도에 따른 객체를 만든 것

*객체를 생성하기 위해 꼭 사용해야하는 예약어는?
new

*객체를 생성하기 위해 필요한 것
생성자

---

*Java의 네 가지 변수

public lass VairalbesTypes{
int 인스턴스_변수;
static int 클래스_변수;
public void method(int 매개_변수)
 {
  int 지역_변수;
 }
}



1. 지역 변수(local variables)
중괄호 내에서 선언된 변수
지역 변수를 선언한 중괄호 내에서만 유요하다.

2. 매개 변수(parameters)
메소드에 넘겨주는 변수
메소드가 호출될 때 생명이 시작되고, 메소드가 끝나면 소멸된다

3. 인스턴스 변수(instance variables)
메소드 밖에, 클래스 안에 선언된 변수. 앞에는 static이라는 예약어가 없어야 한다.
객체가 생성될 때 생명이 시작되고, 그 객체를 참조하고 있는 다른 객체가 없으면 소멸된다.

4. 클래스 변수(class variables)
인스턴스 변수처럼 메소드 밖에, 클래스 안에 선언된 변수 중에서 타입 선언 앞에 static이라는 예약어가 있는 변수
클래스가 처음 호출될 때 생명이 시작되고, 자바 프로그램이 끝날 때 소멸된다.




*Java의 기본 자료형
자바의 자료형
: 기본 자료형, 참조 자료형

기본 자료형
-정수형: byte(8bit로 되어있음), short, int, long, char(보통 문자열과 관련된 부분에서 사용)
-소수형: float, double
-기타: boolean

---

*형변환(Casting)

형 변환은 서로 다른 타입 사이에 변환하는 작업을 하는 것.
자바의 형 변환은 모두 괄호로 묶어주면 된다.

기본 자료형 중에서 boolean 타입은 형 변환이 불가능하다.(숫자로 변환할 수 없기 때문이다.)

예) short의 값을 long에 할당할 때는 어떤 것을 해줘야하나요?
(long)으로 형변환을 해줘야 한다.

단, long의 값을 short로 변경할 때 처럼 더 작은 단위로 형 변환을 할 시에 비트 계산에 따라 원하는 값이 나오지 않을 수 있으므로 주의해야 한다.

---

*switch문

switch 블록 안에서 비교 대상값 안에 사용하는 예약어는 무엇인가요?
:case

switch 조건을 빠져나가도록 하는 예약어는 무엇인가요?
:break

switch 조건들에 맞지 않을 때 기본 처리를 하기 위한 예약어는 무엇인가요?
:default


while문을 무조건 한번은 실행하게 하려면 어떻게 해야 하나요?
:do-while문 사용

while문을 마음대로 빠져나가게 하려면 어떤 예약어를 사용하면 되나요?
:break

while문의 중간에 while문의 소괄호 점검 구문으로 건너뛰도록 할 때 사용하는 예약어는 무엇인가요?
:continue

---

*자바 기본 자료형의 배열 선언 두 가지 방법

1) int [] lottoNumbers;  (권장)

2) int lottoNumbers[];



* 배열을 선언하기만 하면 아직 몇 개의 데이터가 들어가는지 알 수 없다. 따라서 꼭 초기화를 해줘야 한다. 
1), 2) 모두 가능.

1) int [] lottoNumbers = new int[7];

2) int [] lottoNumbers;
   lottoNumbers = new int[7];

3) int [] lottonNumbers = {3, 5, 7, 9, 11};
* 배열의 값 지정
lottoNumbers[1] = 15;



* 배열을 위한 for 루프

for(타입이름 임시변수명 : 반복대상객체){

}

ex)

int[] oneDim = new int[]{1,2,3,4,5,6,7,8,9,10);
for(int data : oneDim){
	System.out.println(data);
}

---

* 참조 자료형

기본 자료형 8개를 제외한 나머지 타입은 모두 참조 자료형(Reference type)이다.

앞장까지 배운 각종 연산자들은 대부분 기본 자료형을 위해서 존재하는 것이다. 그 중에서 +는 참조 자료형 중에서 String 클래스만 사용 가능하고, 나머지 클래스에서는 사용할 수 없다. 그 이외에 다른 참조 자료형이 사용할 수 있는 연산자는 오직 하나다. 바로 값을 할당하기 위한 등호(=) 뿐이다.

참조 자료형은 new를 사용하여 객체를 사용한다. new 뒤에 나오는 것이 바로 생성자다.
생성자는 메소드와 비슷하게 생겼지만, 리턴 타입이 없고, 클래스 이름으로 되어 있다는 점이 메소드와 다르다.

* 오버로딩(Overloading)
메소드의 이름을 같도록 하고, 매개 변수만을 다르게 하는 것

public class ReferenceOverloading {
	public static void main(String args[]){
	  ReferenceOverloading reference = new ReferenceOverloading();
	}
	
	public void print(int data){
	}

	public void print(String data){
	}

	public void print(int intData,  String stringData){
	}

	public void print(String stringData, int intData){
	}

}

* Static 메소드

static은 개게를 생성하지 않아도 메소드를 호출할 수 있는 메소드이다.

public class ReferenceStatic{
	public static void main(String args[]){
		Reference.staticMethod();
	}
	public static void staticMethod(){
		System.out.println("This is a staticMethod.");
	}
}

--> 컴파일 하면
This is a staticMethod.  정상 출력됨.

왜냐하면, staticMethod() 메소드는 static 메소드이기 때문에 객체를 생성하지 않고서도 메소드를 호출 가능.


하지만, static 메소드는 클래스 변수(static 붙은 변수)만 사용할 수 있다는 단점이 있다.

* Pass by value, Pass by reference

Pass by value
복제술처럼 메소드의 매개 변수로 넘길 때에 원래 값은 놔두고, 전달되는 값이 원래값인 것처럼 보이개 한다. 그래서, 매개 변수를 받은 메소드에서 그 값을 어떻게 지지고 볶던 간에 원래의 값은 변하지 않는다.
기본 자료형은 무조건 Pass by value로 데이터를 전달한다.

Pass by reference
Pass by reference로 값이 전달되면, 호출한 메소드의 데이터에도 영향이 있다.
만약 매개 변수로 받은 참조 자료형 안에 있는 객체를 변경하면, 호출한 참조 자료형 안에 있는 객체는 호출된 메소드에서 변경한 대로 데이터가 바뀐다. 이와 같이 값(value)가 아니라 객체에 대한 참조(reference)가 넘어가는 것을 Pass by Reference라고 한다.
참조 자료형은 Pass by Reference로 데이터를 전달한다.

---

* 패키지

클래스들의 묶음. 클래스들을 분류하기 위해 사용.

* 자바의 접근 제어자

public: 누구나 접근 가능
protected: 같은 패키지 내에 있거나 상속받은 경우에만 접근 가능
package-private: 같은 패키지 내에 있을 때만 접근 가능
private: 해당 클래스 내에서만 접근 가능

* 클래스에 선언되어 있는 static한 메소드나 변수를 import 하려면 어떻게 선언해야 하나요?
import static

---

* 상속

public class Child extends Parent

* super

자바의 예약어.
메소드처럼 super()로 사옹하면 부모 클래스의 생성자를 호출한다는 것을 의미한다. 
메소드처럼 사용하지 않고 super.printName()으로 사용하면 부모 클래스에 있는 printName()이라는 메소드를 호출한다는 의미다.

* 메소드 Overriding

부모 클래스에 선언되어 있는 메소드와 동일하게 선언되어 있는 메소드를 자식 클래스에 선언하면 자식 클래스의 메소드만 실행된다. 
생성자의 경우 자동으로 부모 클래스에 있는 생성자를 호출하는 super()가 추가되지만, 메소드는 그렇지 않다. 이게 바로 "메소드 Overriding이다."


참고로 "동일하게 선언되어 있다"는 말을 좀 유식하게 하면 "동일한 signature를 가진다"라고 표현한다. 여기서 signature는 메소드 이름과 매개 변수의 타입 및 개수를 의미한다.

<Overriding 정리>
메소드 Overriding은 부모 클래스의 메소드와 동일한 시그니처를 갖는 자식 클래스의 메소드가 존재할 때 성립된다.
Overriding된 메소드는 부모 클래스와 동일한 리턴 타입을 가져야만 한다.
Overriding된 메소드의 접근 제어자는 부모 클래스에 있는 메소드와 달라도 되지만, 접근 권한이 확장되는 경우에만 허용된다. 접근 권한이 축소될 경우에는 컴파일 에러가 발생한다.


[주의]
Overloading: 확장 (메소드의 매개 변수들을 확장하기 때문에. 확장)
Overriding: 덮어 씀 (부모 클래스의 메소드 시그니처를 복제해서 자식 클래스에서 새로운 것을 만들어 내어 부모 클래스의 기능은 무시하고, 자식 클래스에서 덮어 씀)


* 참조 자료형의 형 변환

자식 클래스에서는 부모 클래스에 있는 메소드와 변수들을 사용할 수 있다.
그런데, 거꾸로 부모 클래스에서는 자식 클래스에 있는 모든 메소드와 변수들을 사용할 수 없다.

- instance
: 명시적으로 형 변환을 하기 전에 타입을 확인할 때 쓰는 예약어


* Polymorphism(다형성)
하나의 객체가 여러가지 타입을 가질 수 있는 것을 의미한다.
다형성은 상속, 추상화와 더불어 객체지향 프로그래밍을 구성하는 중요한 특징 중 하나.
형 변환을 하더라도, 실제 호출되는 것은 원래 객체에 있는 메소드가 호출되는 것.
자바에서는 이런한 다형성을 부모 클래스 타입의 참조 변수로 자식 클래스 타입의 인스턴스를 참조할 수 있도록 하여 구현하고 있다.


---

* API
: Application Programming Interface
: 애플리에키션에 선언되어 있는 클래스와 메소드에 대한 상세한 설명이 포함된 문서

---

자바의 클래스는 아무런 상속을 받지 않으면, java.lang.Obejct 클래스(이하 Object)를 확장한다.
이를 알 수 있는 가장 쉬운 방법은 Object 클래스에 있는 메소드를 사용하는 것이다.

모든 클래스가 Object 클래스의 상속을 받는 가장 큰 이유는 Object 클래스에 있는 메소드들을 통해서 클래스의 기본적인 행동을 정의할 수 있기 때문이다. Object 클래스에 선언되어 있는 메소드는 객체를 처리하기 위한 메소드와 쓰레드를 위한 메소드로 나뉜다.
(쓰레드는 프로그램이 실행되는 작은 단위 중 하나)

객체를 처리하기 위한 메소드
toString()  -> 자기가 만든 클래스에 Overriding해서 사용한다. System.out.prinln() 메소드를 사용해 클래스를 출력했을 때 호출됨.
equals() -> 객체의 주소를 비교하는 것이 아닌, 값을 비교할 때 overriding해서 사용한다.
hashCode()
getClass()
clone()
finalize()

---

* abstract class

package c.service;

import c.model.MemberDTO;

public abstract class MemberManagerAbstract{

	public abstract boolean addMember(MemberDTO member);
	public abstract boolean removeMember(String name, String phone);
	public abstract boolean updateMember(MemberDTO member);
	public void printLon(String data){
		System.out.println("Data=" + data);
	}

}

abstract 클래스는 클래스 선언시 abstract이라는 예약어가 클래스 앞에 추가되면 된다.
abstract 클래스 안에는 abstract으로 선언된 메소드가 0개 이상 있으면 된다.
abstract으로 선언된 메소드가 하나라도 있으면, 그 클래스는 반드시 abstract으로 선언되어야만 한다.
abstract 클래스는 몸통이 있는 메소드가 0개 이상 있어도 전혀 상관없으며, static이나 final 메소드가 있어도 된다.
(interface는 static이나 final 메소드가 선언되더 있으면 안 된다.)


이러한 abstract 클래스는 인터페이스처럼 implements라는 예약어를 사용해 구현할 수 없다. 왜냐하면 인터페이스가 아니라 클래스이기 때문이다.
클래스의 상속에서 extends라는 예약어를 사용해 그 뒤에 확장할 클래스 이름을 명시했었다. 마찬가지로, abstract 클래스에는 구현된 메소드가 있을 수 있기 때문에 확장해서 사용한다고 얘기해줘야한다.

(extends 뒤에는 클래스가 단 하나만 존재할 수 있고, implements 뒤에는 interface가 여러 개 존재할 수 있다는 것은 꼭 기억!)

package c.service;

import c.model.MemberDTO;

public class MemberManagerImpl2 extends MemberManagerAbstract{
	public boolean addMember(MemberDTO member){
		return false;
	}
	
	public boolean removeMember(String name, String phone){
		return false;
	}

	public boolean updateMember(MemberDTO member){
		return false;
	}
}


-----------------------------------------------------------------------------------------------
			|interface      |abstract class	|   class       |
-----------------------------------------------------------------------------------------------
선언 시 사용하는 예약어	|interface	|abstract class	|   class	|
			|		|		|		|
-----------------------------------------------------------------------------------------------
구현 안 된 메소드 포함 가능?	| 가능(필수)	|	가능	|	불가	|
-----------------------------------------------------------------------------------------------
구현된 메소드 포함 가능?	| 불가능		|	가능	|	가능(필수)	|
-----------------------------------------------------------------------------------------------
static 메소드 선언 가능 여부	| 불가능		|	가능	|	가능	|
-----------------------------------------------------------------------------------------------
final 메소드 선언 가능 여부	| 불가		|	가능	|	가능	|
-----------------------------------------------------------------------------------------------
상속(extends) 가능?	| 불가		|	가능	|	가능	|
-----------------------------------------------------------------------------------------------
구현(implements) 가능?	| 가능		|	불가	|	불가능	|
-----------------------------------------------------------------------------------------------

* 상속과 관련해 알아둬야하는 예약어 final

final은 클래스, 메소드, 변수에 선언할 수 있다.

1) 클래스에 선언할 경우 다음과 같이 선언하면 된다.

public final class FianlClass{

}

클래스에 선언하는 경우는? 더 이상 확장해서는 안 되는 클래스, 누군가 이 클래스를 상속 받아서 내용을 변경해서는 안 되는 클래스를 선언할 때 final로 선언하면 된다.


2) 메소드에 선언할 경우

public abstract class FinalMethodClass{
	public final void printLog(String data){
		System.out.println("Data = " + data);
	} 
}

메소드에 선언하는 경우는? 클래스에 선언할 때와 비슷한 이유이다. 다른 개발자가 여러분들이 만든 메소드를 변경하지 못하도록 메소드를 overriding하는 것을 막고 싶을 때 final로 만들면 된다. 메소드에 그렇게 자주 사용되지는 않는다.


3) 변수에 선언할 경우
<기본 자료형>

변수에 final을 사용하는 것은 개념이 조금 다르다. 변수에 final을 사용하면 그 변수는 "더 이상 바꿀 수 없다."라는 말이다.
그래서, 인스턴스 변수나 static으로 선언된 클래스 변수는 선언과 함께 값을 지정해야만 한다.

public class FinalVariable{
	final int instanceVariable = 1; // 값을 꼭 지정해줘야한다.
}


하지만 매개 변수나 지역 변수는 초기화를 꼭 하지 않아도 된다.
public class FinalVariable{
	final int instanceVariable = 1;
	
	public void method(final int parameter){
		final int localVariable;
	}
}
매개 변수는 이미 초기화가 되어서 넘어 왔고, 지역 변수는 메소드를 선언하는 중괄호 내에서만 참조되므로 다른 곳에서 변경할 일이 없다. 
따라서, 컴파일은 전혀 문제없이 된다.

<참조 자료형>
final로 선언된 클래스의 객체는 두 번 이상 생성할 수 없다.
하지만, 그 객체의 안에 있는 객체들은 final로 선언된 것이 아니기 때문에 이런 제약이 없다.
왜냐하면 MemberDTO에 선언되어 있는 name, phone, email 모두 final이 아니기 때문이다.
해당 클래스가 final이라고 해서, 그 안에 있는 인스턴스 변수나 클래스 변수가 final은 아니라는 부분은 꼭 기억해둬야한다.

public class FinalReferenceType{
	final MemberDTO dot = new MemberDTO();

	public static void main(String[] args){
		FinalReferenceType referenceType = new FinalReferenceType();
		referenceType.checkDTO();
	}

	public void checkDTO(){
		System.out.println(dot);
		// dto = new MemberDTO(); // 이렇게 다시 생성자로 초기화하면 컴파일 시 에러가 발생한다.
		
		dto.name = "Sangmin"; // dto 안에 있는 name, phone, email은 final이 아니기 때문에
				      // 새로 값을 할당할 수 있다.
	}
}

---

* enum class

class라고 선언하는 부분에 enum이라고 선언하면 "이 객체는 상수의 집합이다"라는 것을 명시적으로 나타낸다.

<enum class 선언>

package c.enums;

public enum OverTimeValues {
	THREE_HOUR,
	FIVE_HOUR,
	WEEKEND_FOUR_HOUR,
	WEEKEND_EIGHT_HOUR;
}

<enum 클래스 사용>
1) switch 문에서 사용

package c.enums;

public class OverTimeManager{

	public int getOverTimeAmount(OverTimeValues value){
	
	int amount = 0;
	System.out.println(value);
	switch(value) {
		case THREE_HOUR:
			amount = 18000;
			break;

		case FIVE_HOUR:
			amount = 30000;
			break;

		case WEEKEND_FOUR_HOUR:
			amount = 40000;
			break;
		
		case WEEKEND_EIGHT_HOUR:
			amount = 60000;
			break;

		}
	return amount;
	}
}



그렇다면 getOverTimeAmount()메소드에 어떻게 OverTimeValues라는 enum 타입을 전달할까?

public static void main(String[] args){
	OverTimeManager manager = new OverTimeManager();
	int myAmount = manager.getOverTimeAmount(OverTimeValues.THREE_HOUR);
	System.out.println(myAmount);
}

가장 쉽게 이해하는 방법은 'enum 클래스 이름.상수이름'을 지정함으로써 클래스의 객체 생성이 완료된다고 생각하면 된다.

보통은 이와 같이 간단하게 별도의 변수를 생성하지 않고 사용하지만, 이해를 돕기 위해서 다음의 코드를 풀어서 쓰면 어떻게 구현되는지 보자.

int myAmount = manager.getOverTimeAmount(OverTimeValue.THREE_HOUR);

을 풀어쓰면

OverTimeValues value = OverTimeValues.THREE_HOUR;
int myAmount = manager.getOverTimeAmount(value);

이렇게 풀어쓸 수 있다.


--------------

<enum을 사용하는 다른 방법>


package c.enums;

public enum OverTimeValues2{

	THREE_HOUR(18000),
	FIVE_HOUR(30000),
	WEEKEND_FOUR_HOUR(40000),
	WEEKEND_EIGHT_HOUR(60000);

	private final int amount;

	OverTimeValues2(int amount){  //enum 생성자
		this.amount = amount;
	}

	public int getAmount(){
		return amount;
	}
}




앞 절의 예제와 다르게 각 상수들의 값이 지정돼있다.
enum 클래스도 생성자를 사용할 수는 있지만 package-private과 private만 접근 제어자로 사용할 수 있다.(public, protected를 생성자로 사용할 수 없다)
다시 말해, 각 상수를 enum 클래스 내에서 선언할 때만 이 생성자를 사용할 수 있다.
앞 절에서 사용한 enum 클래스는 일반 클래스와 마찬가지로, 컴파일 할 때 생성자를 자동으로 만들어 줬기 때문에 따로 생성자를 작성하지 않아도 작동한 것이다.

package c.enums;

public class OverTimeManager2{

	public static void main(String[] args){
		OverTimeValues2 value2 = OverTimeValues2.FIVE_HOUR;
		System.out.println(value2);
		System.out.println(value2.getAmout());
	}



}

---

자바에서 .class 파일을 만들 수 있는 것에는 클래스만 있는 것이 아니다.
interface와 abstract 클래스가 존재한다.

interface, abstract 클래스를 사용하는 이유
1. 설계시 선언해 두면 개발할 때 기능을 구현하는 데에만 집중할 수 있다.
2. 개발자의 역량에 따른 메소드의 이름과 매개 변수 선언의 격차를 줄일 수 있다.
3. 공통적인 interface와 abstract 클래스를 선언해 놓으면, 선언과 구현을 구분할 수 있다.

* interface class

package c.service;

import c.model.MemberDTO;

public interface MemberManager {

	public boolean addMember(MemberDTO member);
	public boolean removeMember(String name, String phone);
	public boolean updateMember(MemberDTO member);

}


인터페이스 선언부는 public interface로 시작한다.
interface 내부에 선언된 메소드들은 몸통이 있으면 안 된다. 즉, 메소드 선언 이후에 중괄호를 열고 닫거나 중괄호 안에 한 줄의 코드도 있으면 안된다.

<interface 구현>

package c.service;

public class MemberManagerImpl implements MemberManager{

	@Override
	public boolean addMemeber(MemberDTO member){
		return false;
	}

	@Override
	public boolean removeMember(String name, String phone){
		return false;	
	}

	@Override
	public boolean updateMember(MemberDTO member){
		return false;
	}

}

인터페이스를 구현할 경우에는 반드시 인터페이스에 정의 된 메소드들을 모두 구현해줘야한다.

이제 개발자들이 해야 하는 일은 대충 return false만 적어 놓은 메소드들이 실제로 Member 정보를 저장하고, 삭제하고, 수정하는 일을 할 수 있도록 제대로 된 코드를 만드는 것이다. 바로 이 작업이 개발 프로세스 중에서 "개발"에 해당한다.
정리하자면, 설계 단계에서 인터페이스만 만들어 놓고, 개발 단계에서 실제 작업을 수행하는 메소드를 만들면 설계 단계의 산출물과 개발 단계의 산출물이 보다 효율적으로 관리된다.

이렇게 설계에서만 사용하려고 인터페이스를 만드는 것은 아니다. 인터 페이스의 또 다른 용도는 외부에 노출되는 것을 정의해 놓고자 할 떄 사용된다. 다시 말해서 MemberManagerImpl이라는 클래스가 있는데, 이 클래스가 "저한테 직접 이야기하지 마시구요. 공식적인 것은 저의 대변인을 통해서 말씀하세요"라고 내 놓는 대변인이 바로 인터페이스다.

<interface 사용하기>

package c;

import c.service.MemberManager;
import c.service.MemeberManagerImpl;

public class InterfaceExample{
	public static void main(String[] args){
		MemberManager member = new MemberManagerImpl();
}

---

*예외의 종류

1. error
2. runtime exception (unchecked exception)
3. checked exception

error와 runtime exception을 제외한 모든 예외는 checked exception이다.

1) error

에러는 자바 프로그램 밖에서 발생한 예외를 말한다.
가장 흔한 예가 서버의 디스크가 고장났다든지, 메인보드가 맛이 가서 자바 프로그램이 제대로 동작하지 못하는 경우가 여기에 속한다.
오류의 이름이 Error로 끝나면 에러이고, Exception으로 끝나면 예외다.
Error와 Exception으로 끝나는 오류의 가장 큰 차이는 프로그램 안에서 발생했는지, 밖에서 발생했는지 여부이다.
하지만, 더 큰 차이는 프로그램이 멈추어 버리느냐 계속 실행할 수 있느냐의 차이다.
더 정확하게 말하면 Error는 프로세스에 영향을 주고, Exception은 쓰레드에만 영향을 준다.

2) runtime exception
런타임 예외는 예외가 발생할 것을 미리 감지하지 못했을 때 발생한다.
이 예외를 묶어주지 않는다고 해서 컴파일 할 때 예외가 발생하지 않는다. 하지만, 실행시에는 발생할 가능성이 있다. 그래서, 이러한 예외들을 런타임 예외라고 한다. 그리고, 컴파일 시에 체크를 하지 않기 때문에 unchecked exception이라고도 부르는 것이다.

---

* Annotation

1. 컴파일러에게 정보를 알려주거나
2. 컴파일할 때와 설치 시의 작업을 지정하거나
3. 실행할 때 별도의 처리가 필요할 때
사용한다.

미리 정해져 있는 어노테이션들은 딱 3개 뿐

@Override

해당 메소드가 부모 클래스에 있는 메소드를 Override했다는 것을 명시적으로 선언한다.
이 메소드는 Override된 거니까 만약에 잘못 코딩했으면 컴파일러에게 알려달라고 지정해주는 것

@Deprecated

더이상 사용하지 않는 클래스나 메소드임을 알리고 경고를 보내라고 지정.

@SupressWarnings
프로그램에 문제가 없고 잘 핸들링하고 있을 때 컴파일러에서 경고를 보내는 경우, 경고를 해 줄 필요가 없다고 지정해주는 것

---

*JIT 컴파일러
자바에서 사용되는 개념.
Just-In-Time의 약자.
좀 더 쉬운 말로 하자면 동적 변환(dynamic translation)이다.
JIT라는 것을 만든 이유는 프로그램 실행을 보다 빠르게 하기 위해서다. 명칭이 컴파일러지만, 실행시에 적용되는 기술이다.

컴퓨터를 프로그램을 실행하는 방식은 두 가지로 나눌 수 있음.
1) Interpret 방식: 프로그램을 실행할 때 마다 컴퓨터가 알아 들을 수 있는 언어로 변환하는 작업을 수행
간편하긴 하지만 성능이 매우 느릴 수 밖에 없다.

2) static(정적) Compile 방식:
실행하기 전에 컴퓨터가 알아 들을 수 있는 언어로 변환하는 작업을 미리 실행
따라서 변환 작업은 딱 한 번만 수행한다.

JIT는 이 두 가지 방식을 혼합한 것이다.
javac라는 명령어를 사용하여 컴파일을 하는 단계에서 만들어진 class라는 파일은 bytecode일 뿐이다.
javac라는 명령어를 수행한다는 것은 텍스트로 만든 java 파일을 어떤 OS에서도 수행될 수 있도록 바이트 코드라는 파일로 만든 것 뿐.

커뮾터가 알아먹을 수 있도록 하려면 다시 변환 작업이 필요한테, 이 변환 작업을 JIT 컴파일러에서 한다고 보면 됨.
아래의 'JVM ---> 기계 코드'로 변환되는 부분을 JIT에서 수행하는 것이다.
JIT를 사용하면 반복적으로 수행되는 코드는 매우 빠른 성능을 보인다는 장점이 있지만, 
반대로 처음에 시작할 때엔 변환 단계를 거쳐야 하므로 성능이 느리다는 단점이 있다.


<자바 프로그램이 수행되는 절차>

자바 소스 코드			컴파일된 Bytecode		 	기계 코드
	------>		  ------>	    ------>      ------>	------> 하드웨어 및 OS
		[자바 컴파일러]			    [JVM]

* 자바를 배우면 꼭 알아야 하는 용어

JVM : Java Virtual Machine
GC : Garbage Collector

JVM은 작성한 자바 프로그램이 수행되는 프로세스를 의미함.
java라는 명령어를 통해서 애플리케이션이 수행되면, 이 JVM 위에서 애플리케이션이 동작한다.
이 JVM에서 작성한 프로그램을 찾고 실행하는 일련의 작업이 진행됨.

JVM은 메모리 관리를 스스로 수행함.
JVM 내에서 메모리 관리를 해주는 것을 Garbage Collector라고 부름.